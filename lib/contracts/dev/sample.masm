use.miden::account

# const.CURRNET_TURN_PLAYER_PUB_KEY_INDEX=63

# index corresponding to the information saved
const.PLAYER_1_INDEX=62 # use this index to find other player pub key slot index which would always be second to the player account id
const.SMALL_BLIND_INDEX=56
const.BIG_BLIND_INDEX=57
const.BUY_IN_INDEX=58
const.NO_OF_PLAYERS_INDEX=59
const.CURRENT_TURN_INDEX=60
const.RAISER_INDEX=61
const.HIGHEST_BET_SLOT_INDEX=63
const.CURRENT_TURN_PLAYER_PUB_KEY_INDEX=64 # need to check it's storage initially small blind public key on slot 62

# this procedure just stores the cards as items in the account storage
export.receive_cards
    exec.account::set_item

    # prepare stack for return
    movup.4 drop movup.4 drop movup.4 drop
end

# it helps to check that the intended player is calling the function 
export.poker_auth_tx_rpo_falcon512
    # Get commitments to created notes
    exec.tx::get_output_notes_hash
    # => [OUTPUT_NOTES_HASH, ...]

    # Get commitments to consumed notes
    exec.tx::get_input_notes_hash
    # => [INPUT_NOTES_HASH, OUTPUT_NOTES_HASH, ...]

    # Get current nonce of the account and pad
    exec.account::get_nonce push.0.0.0
    # => [0, 0, 0, nonce, INPUT_NOTES_HASH, OUTPUT_NOTES_HASH, ...]

    # Get current AccountID and pad
    exec.account::get_id push.0.0.0
    # => [0, 0, 0, account_id, 0, 0, 0, nonce, INPUT_NOTES_HASH, OUTPUT_NOTES_HASH, ...]

    # Compute the message to be signed
    # M = h(OUTPUT_NOTES_HASH, h(INPUT_NOTES_HASH, h(0, 0, 0, account_id, 0, 0, 0, nonce)))
    hmerge hmerge hmerge

    # Get public key from account storage at pos 0 and verify signature
    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [PUB_KEY, M]

    # Verify the signature against the public key and the message. The procedure gets as
    # inputs the hash of the public key and the hash of the message via the operand
    # stack. The signature is provided via the advice stack. The signature is valid if and
    # only if the procedure returns.
    exec.rpo_falcon512::verify
    # => []

    # Update the nonce
    push.1 exec.account::incr_nonce
    # => []
end

# should be executed using transcripts
export.play_call
    # when user wants to just call and match the bet
    # fetch the current bet we need to 2 to the player_1_index 

    push.PLAYER_1_INDEX.2 add exec.account::get_item 
    # => [0, 0, 0, current bet] since we are currently storing everything in word 
    drop drop drop
    # => [current bet]
    push.HIGHEST_BET_SLOT_INDEX exec.account::get_item
    # => [0, 0, 0, highest bet, current bet]
    drop drop drop
    sub 
    # => [highest bet - current bet] subtract this amount from player balance 
    # => [difference]
    # using current turn index found player index 
    const.CURRENT_PLAYER_INDEX=100
    push.CURRENT_PLAYER_INDEX.4 # At 4th we are saving using balance 
    exec.account::get_item
    # => [balance, difference]
    sub
    # => [balance - difference]
    push.CURRENT_PLAYER_INDEX.4
    exec.account::set_item 
end

# export.play_check

# end

# export.play_raise

# end

# export.play_fold

# end